document.addEventListener("DOMContentLoaded", () => {  const activitiesList = document.getElementById("activities-list");  const activitySelect = document.getElementById("activity");  const signupForm = document.getElementById("signup-form");  const messageDiv = document.getElementById("message");    // Authentication elements  const loginBtn = document.getElementById("login-btn");  const logoutBtn = document.getElementById("logout-btn");  const welcomeMsg = document.getElementById("welcome-msg");  const loginModal = document.getElementById("login-modal");  const loginForm = document.getElementById("login-form");  const loginError = document.getElementById("login-error");  const closeModal = document.querySelector(".close");  const signupBtn = document.getElementById("signup-btn");    // Authentication state  let authToken = localStorage.getItem("authToken");  let isLoggedIn = !!authToken;    // Update UI based on auth state  function updateAuthUI() {    if (isLoggedIn) {      loginBtn.classList.add("hidden");      logoutBtn.classList.remove("hidden");      welcomeMsg.classList.remove("hidden");      signupBtn.disabled = false;    } else {      loginBtn.classList.remove("hidden");      logoutBtn.classList.add("hidden");      welcomeMsg.classList.add("hidden");      signupBtn.disabled = true;    }  }    // Function to fetch activities from API  async function fetchActivities() {    try {      const response = await fetch("/activities");      const activities = await response.json();      // Clear loading message and dropdown      activitiesList.innerHTML = "";      activitySelect.innerHTML = '<option value="">-- Select an activity --</option>';      // Populate activities list      Object.entries(activities).forEach(([name, details]) => {        const activityCard = document.createElement("div");        activityCard.className = "activity-card";        const spotsLeft = details.max_participants - details.participants.length;        // Create participants HTML with delete icons (only show if logged in)        const participantsHTML =          details.participants.length > 0            ? `<div class="participants-section">              <h5>Participants:</h5>              <ul class="participants-list">                ${details.participants                  .map(                    (email) =>                      `<li><span class="participant-email">${email}</span>${isLoggedIn ? `<button class="delete-btn" data-activity="${name}" data-email="${email}">‚ùå</button>` : ''}</li>`                  )                  .join("")}              </ul>            </div>`            : `<p><em>No participants yet</em></p>`;        activityCard.innerHTML = `          <h4>${name}</h4>          <p>${details.description}</p>          <p><strong>Schedule:</strong> ${details.schedule}</p>          <p><strong>Availability:</strong> ${spotsLeft} spots left</p>          <div class="participants-container">            ${participantsHTML}          </div>        `;        activitiesList.appendChild(activityCard);        // Add activity to select dropdown        const option = document.createElement("option");        option.value = name;        option.textContent = name;        activitySelect.appendChild(option);      });      // Add event listeners to delete buttons (only if logged in)      if (isLoggedIn) {        document.querySelectorAll(".delete-btn").forEach((button) => {          button.addEventListener("click", handleUnregister);        });      }    } catch (error) {      activitiesList.innerHTML =        "<p>Failed to load activities. Please try again later.</p>";      console.error("Error fetching activities:", error);    }  }  // Handle unregister functionality  async function handleUnregister(event) {    const button = event.target;    const activity = button.getAttribute("data-activity");    const email = button.getAttribute("data-email");    if (!isLoggedIn) {      showMessage("Authentication required", "error");      return;    }    try {      const response = await fetch(        `/activities/${encodeURIComponent(          activity        )}/unregister?email=${encodeURIComponent(email)}`,        {          method: "DELETE",          headers: {            "Authorization": `Bearer ${authToken}`          }        }      );      const result = await response.json();      if (response.ok) {        showMessage(result.message, "success");        fetchActivities(); // Refresh the activities list      } else {        showMessage(result.detail || "Failed to unregister", "error");      }    } catch (error) {      showMessage("Network error occurred", "error");      console.error("Error unregistering:", error);    }  }  // Handle form submission  signupForm.addEventListener("submit", async (event) => {    event.preventDefault();    if (!isLoggedIn) {      showMessage("Please login as a teacher to register students", "error");      return;    }    const email = document.getElementById("email").value;    const activity = document.getElementById("activity").value;    try {      const response = await fetch(        `/activities/${encodeURIComponent(          activity        )}/signup?email=${encodeURIComponent(email)}`,        {          method: "POST",          headers: {            "Authorization": `Bearer ${authToken}`          }        }      );      const result = await response.json();      if (response.ok) {        showMessage(result.message, "success");        signupForm.reset();        fetchActivities(); // Refresh the activities list      } else {        showMessage(result.detail || "Failed to sign up", "error");      }    } catch (error) {      showMessage("Network error occurred", "error");      console.error("Error signing up:", error);    }  });  // Authentication functions  loginBtn.addEventListener("click", () => {    loginModal.classList.remove("hidden");    loginModal.style.display = "block";  });  logoutBtn.addEventListener("click", async () => {    try {      await fetch("/auth/logout", {        method: "POST",        headers: {          "Authorization": `Bearer ${authToken}`        }      });    } catch (error) {      console.error("Logout error:", error);    }        localStorage.removeItem("authToken");    authToken = null;    isLoggedIn = false;    updateAuthUI();    fetchActivities(); // Refresh to hide delete buttons    showMessage("Logged out successfully", "success");  });  closeModal.addEventListener("click", () => {    loginModal.style.display = "none";    loginModal.classList.add("hidden");  });  window.addEventListener("click", (event) => {    if (event.target === loginModal) {      loginModal.style.display = "none";      loginModal.classList.add("hidden");    }  });  loginForm.addEventListener("submit", async (event) => {    event.preventDefault();        const username = document.getElementById("username").value;    const password = document.getElementById("password").value;    try {      const response = await fetch("/auth/login", {        method: "POST",        headers: {          "Content-Type": "application/x-www-form-urlencoded",        },        body: `username=${encodeURIComponent(username)}&password=${encodeURIComponent(password)}`      });      const result = await response.json();      if (response.ok) {        authToken = result.token;        localStorage.setItem("authToken", authToken);        isLoggedIn = true;        updateAuthUI();        loginModal.style.display = "none";        loginModal.classList.add("hidden");        loginForm.reset();        fetchActivities(); // Refresh to show delete buttons        showMessage("Login successful", "success");      } else {        loginError.textContent = result.detail || "Login failed";        loginError.classList.remove("hidden");      }    } catch (error) {      loginError.textContent = "Network error occurred";      loginError.classList.remove("hidden");      console.error("Login error:", error);    }  });  // Helper function to show messages  function showMessage(text, type) {    messageDiv.textContent = text;    messageDiv.className = `message ${type}`;    messageDiv.classList.remove("hidden");    // Hide message after 5 seconds    setTimeout(() => {      messageDiv.classList.add("hidden");    }, 5000);  }  // Initialize app  updateAuthUI();  fetchActivities();});